import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { trpc } from "../utils/trpc";
import { EnvelopeIcon, LockClosedIcon, EyeIcon, EyeSlashIcon, UserCircleIcon, ChevronDownIcon, ChevronLeftIcon, UsersIcon, ArrowRightOnRectangleIcon, CameraIcon, ArrowPathIcon } from "@heroicons/react/24/solid";
import SocialButton from "../components/SocialButton";
import Link from "next/link";
import { useTheme } from "next-themes";
import { signIn, signOut, useSession } from "next-auth/react";
import { Fragment, useState } from "react";
import { Menu, Transition } from "@headlessui/react";
import MenuLinkButton from "../components/MenuLink";
import { useForm } from "react-hook-form";

type FormData = {
  image: string;
  name: string;
  bio: string;
  phone: string;
  email: string;
  password: string;
};

const Home: NextPage = () => {
  const { systemTheme } = useTheme();

  const { data: session, status } = useSession();
  const ctx = trpc.useContext();

  const [showPassword, setShowPassword] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [imageFile, setImageFile] = useState<string | null>(null);


  const { data: user } = trpc.useQuery(['user.getUser']);
  const updateUser = trpc.useMutation('user.updateUser', {
    onMutate: () => {
      console.log('onMutate reached. Edit mode still on.');
      ctx.cancelQuery(['user.getUser']);
      const optimisticUpdate = ctx.getQueryData(['user.getUser']);
      optimisticUpdate && ctx.setQueryData(['user.getUser'], optimisticUpdate);
    },
    onSettled: () => {
      console.log('onSettled reached. Edit mode off.');
      ctx.invalidateQueries(['user.getUser']);
      setEditMode(false);
    },
  });

  const { register, handleSubmit, formState: { errors } } = useForm<FormData>();

  const onSubmit = handleSubmit(data => {
    if (!imageFile && user?.image) setImageFile(user.image);
    if (imageFile) data.image = imageFile;
    else data.image = '';
    updateUser.mutate(data);
  });

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const reader = new FileReader();
    reader.onloadend = () => {
      const dataURL = reader.result as string;
      setImageFile(dataURL);
    };

    const file = e.target.files?.[0];
    if (file) {
      console.log(file);
      reader.readAsDataURL(file);
    }
  };

  // console.log('imageFile', imageFile);

  return (
    <>
      <Head>
        <title>Authentication App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/devchallenges.png" />
      </Head>

      {status === 'loading' && (
        <main className="flex items-center justify-center w-screen h-screen gap-4">
          <ArrowPathIcon className="w-10 h-10 animate-spin" />
          <h1>Session loading...</h1>
        </main>
      )}

      {status === 'authenticated' && session.user ? (
        <div className='container flex flex-col items-center min-h-screen p-4 mx-auto'>
          {!user ? (
            <main className="flex items-center justify-center w-screen h-screen gap-4">
              <ArrowPathIcon className="w-10 h-10 animate-spin" />
              <h1>User loading...</h1>
            </main>
          ) : (
            <>
              <header className='z-10 flex flex-col min-w-full gap-9'>
                <nav className='flex items-center justify-between select-none'>
                  <Link href='/'>
                    <a className='flex'>
                      <Image
                        src={systemTheme === 'dark' ? '/devchallenges-light.svg' : '/devchallenges.svg'}
                        alt='devchallenges.io logo'
                        width={132}
                        height={19}
                        objectFit='contain'
                      />
                    </a>
                  </Link>
                  <Menu className='relative' as='div'>
                    <Menu.Button className='flex items-center gap-4'>
                      {({ open }) => {
                        return (
                          <>
                            {!user.image ? (
                              <UserCircleIcon className='w-10 h-10 text-gray-400' />
                            ) : (
                              <Image
                                className='rounded-lg'
                                src={user.image}
                                alt='user profile photo'
                                width={40}
                                height={40}
                                objectFit='cover'
                              />
                            )}
                            <div className='items-center hidden gap-3 md:flex'>
                              <h1 className='text-sm font-bold'>{user.name}</h1>
                              <ChevronDownIcon className={`w-4 h-4 text-gray-400 transition-transform ${open && 'transform rotate-180'}`} />
                            </div>
                          </>
                        );
                      }}

                    </Menu.Button>
                    <Transition
                      as={Fragment}
                      enter="transition ease-in-out duration-100"
                      enterFrom="transform opacity-0 scale-95"
                      enterTo="transform opacity-100 scale-100"
                      leave="transition ease-in duration-75"
                      leaveFrom="transform opacity-100 scale-100"
                      leaveTo="transform opacity-0 scale-95"
                    >
                      <Menu.Items className='absolute flex flex-col gap-2 w-48 origin-top-right rounded-2xl shadow-lg bg-[#2c2c2c] top-full right-0 mt-2 ring-1 ring-black/5 focus:outline-none p-4 justify-start divide-y divide-gray-500'>
                        <div className='flex flex-col'>
                          {[
                            { name: 'Profile', href: '/profile', icon: <UserCircleIcon className='w-5 h-5 text-gray-400' /> },
                            { name: 'Group Chat', href: '/chat', icon: <UsersIcon className='w-5 h-5 text-gray-400' /> }
                          ].map((link) => (
                            <Menu.Item key={link.name}>
                              {({ active }) => (
                                <MenuLinkButton
                                  className={`p-2 flex rounded-lg ${active && 'dark:bg-gray-700 bg-[#F2F2F2]'}`}
                                  href={link.href}>
                                  {link.icon}
                                  {link.name}
                                </MenuLinkButton>
                              )}
                            </Menu.Item>
                          ))}
                        </div>
                        <div className='flex flex-col'>
                          <Menu.Item>
                            {({ active }) => (
                              <button
                                className={`p-2 flex items-center mt-2 gap-2 rounded-lg text-red-500 ${active && 'dark:bg-red-700/20 bg-[#F2F2F2]'}`}
                                onClick={() => signOut()}>
                                <ArrowRightOnRectangleIcon className='w-5 h-5' />
                                Logout
                              </button>
                            )}
                          </Menu.Item>
                        </div>
                      </Menu.Items>
                    </Transition>
                  </Menu>
                </nav >
                <div className='flex flex-col gap-2 text-center place-self-center'>
                  <h1 className='text-2xl'>
                    Personal info
                  </h1>
                  <h2 className='text-sm font-light'>
                    Basic info, like your name and photo
                  </h2>
                </div>
              </header >

              {editMode && (
                <div className='flex mt-10 lg:max-w-3xl max-w-sm w-full text-blue-500'>
                  <label className='flex gap-2 items-center cursor-pointer hover:bg-blue-500/30 active:bg-blue-500/20 rounded-xl pl-2 pr-3 py-2'>
                    <ChevronLeftIcon className='w-5 h-5' />
                    <button onClick={() => setEditMode(false)}>Back</button>
                  </label>
                </div>
              )}
              <main className={`w-full ${editMode ? 'mt-2' : 'mt-10'} max-w-3xl lg:p-12 place-self-center lg:ring-1 ring-[#E0E0E0] dark:ring-[#BDBDBD] rounded-3xl mx-auto`}>
                {editMode ? (
                  <form className='flex flex-col max-w-sm gap-4 mx-auto lg:mx-0'
                    onSubmit={onSubmit}>
                    <div className='flex flex-col gap-2'>
                      <h1 className='text-2xl'>Change Info</h1>
                      <p className='text-sm text-[#828282]'>Changes will be reflected to every service</p>
                    </div>
                    <div className='flex items-center gap-6 select-none'>
                      <label className='grid grid-cols-1 grid-rows-1 overflow-hidden rounded-md cursor-pointer isolate group'>
                        <div className='flex col-start-1 row-start-1'>
                          {!user.image ? (
                            <UserCircleIcon className='w-20 h-20 text-gray-400' />
                          ) : (
                            <Image
                              src={imageFile || user.image}
                              alt='user profile photo'
                              width={72}
                              height={72}
                              objectFit='cover'
                            />
                          )}
                        </div>
                        <div className='z-10 items-center justify-center hidden w-full h-full col-start-1 row-start-1 group-hover:flex bg-black/50 group-active:bg-black/60'>
                          <CameraIcon className='w-5 h-5 text-gray-400' />
                        </div>
                        <input
                          className='hidden'
                          type='file'
                          id='image'
                          accept='image/png, image/jpeg'
                          alt='user profile image input'
                          {...register('image')}
                          onChange={handleImageChange}
                        />
                      </label>
                      <h1 className='uppercase text-[#828282]'>Change photo</h1>
                    </div>
                    {errors.image && (<p className='text-red-500 normal-case'>{errors.image.message}</p>)}

                    <label className='flex flex-col gap-2 text-sm font-medium capitalize'>
                      <h1>Name</h1>
                      <input
                        className='rounded-xl p-3 ring-1 ring-[#828282]'
                        type='text'
                        placeholder='Enter your name...'
                        defaultValue={user.name ?? ''}
                        {...register('name', {
                          required: '* Name is required',
                        })}
                      />
                      {errors.name && (<p className='text-red-500 normal-case'>{errors.name.message}</p>)}
                    </label>
                    <label className='flex flex-col gap-2 text-sm font-medium capitalize'>
                      <h1>Bio</h1>
                      <textarea
                        className='rounded-xl p-3 ring-1 ring-[#828282]'
                        placeholder='Enter your bio...'
                        defaultValue={user.bio ?? ''}
                        rows={3}
                        {...register('bio', {
                          required: '* Bio is required',
                        })}
                      />
                      {errors.bio && (<p className='text-red-500 normal-case'>{errors.bio.message}</p>)}
                    </label>
                    <label className='flex flex-col gap-2 text-sm font-medium capitalize'>
                      <h1>Phone</h1>
                      <input
                        className='rounded-xl p-3 ring-1 ring-[#828282]'
                        type='text'
                        placeholder='Enter your phone...'
                        defaultValue={user.phone ?? ''}
                        {...register('phone', {
                          required: '* Phone is required',
                          minLength: {
                            value: 10,
                            message: '* Phone number must be at least 10 characters',
                          },
                        })}
                      />
                      {errors.phone && (<p className='text-red-500 normal-case'>{errors.phone.message}</p>)}
                    </label>
                    <label className='flex flex-col gap-2 text-sm font-medium capitalize'>
                      <h1>Email</h1>
                      <input
                        className='rounded-xl p-3 ring-1 ring-[#828282]'
                        type='email'
                        placeholder='Enter your email...'
                        defaultValue={user.email ?? ''}
                        {...register('email', {
                          required: '* Email is required',
                        })}
                      />
                      {errors.email && (<p className='text-red-500 normal-case'>{errors.email.message}</p>)}
                    </label>
                    <label className='flex flex-col gap-2 text-sm font-medium capitalize'>
                      <h1>Password</h1>
                      <input
                        className='rounded-xl p-3 ring-1 ring-[#828282]'
                        type='password'
                        placeholder='Enter your password...'
                        defaultValue={user.password ?? ''}
                        {...register('password')}
                      />
                      {errors.password && (<p className='text-red-500 normal-case'>{errors.password.message}</p>)}
                    </label>
                    <button className='self-start px-10 py-2 mt-4 rounded-lg shadow-2xl shadow-black bg-gradient-to-br from-blue-500 to-blue-700 hover:from-blue-600 hover:to-blue-800 active:from-blue-700 active:to-blue-900 disabled:from-red-500 disabled:to-red-700 disabled:px-4 flex items-center gap-2' type='submit' disabled={updateUser.isLoading}>
                      {updateUser.isLoading ? (
                        <>
                          <ArrowPathIcon className="w-5 h-5 animate-spin" />
                          <h1>Updating...</h1>
                        </>
                      ) : 'Save'}
                    </button>
                  </form>
                ) : (
                  <>
                    <div className='grid w-full max-w-3xl grid-cols-2 place-items-center place-self-center'>
                      <label className='flex flex-col gap-1 justify-self-start' htmlFor='edit'>
                        <h1 className='text-2xl'>Profile</h1>
                        <h3 className='text-xs opacity-80'>Some info may be visible to other people</h3>
                      </label>
                      <button className='py-2 px-9 ring-1 ring-[#828282] ring-inset rounded-xl text-[#828282] hover:bg-gray-600 active:bg-gray-700 justify-self-end' id='edit' onClick={() => setEditMode(true)}>
                        Edit
                      </button>
                      {updateUser.isError && (
                        <p className='text-red-500 normal-case col-start-2 justify-self-end text-right'>{updateUser.error.message}</p>
                      )}
                      {updateUser.isSuccess && (
                        <p className='text-green-500 normal-case col-start-2 justify-self-end text-right'>Profile updated successfully</p>
                      )}
                    </div>
                    <div className='grid w-full max-w-3xl grid-cols-[auto_minmax(0,_1fr)] mt-10 grid-rows-6 place-self-center gap-x-4 lg:gap-x-32 grid-lines gap-y-2'>
                      <div className='grid items-center justify-items-start grid-rows-6 row-span-full text-xl uppercase text-[#BDBDBD]'>
                        <h2>Photo</h2>
                        <h2>Name</h2>
                        <h2>Bio</h2>
                        <h2>Phone</h2>
                        <h2>Email</h2>
                        <h2>Password</h2>
                      </div>

                      <div className='grid items-center grid-rows-6 overflow-hidden justify-items-end row-span-full lg:justify-items-start'>
                        {!user.image ? (
                          <UserCircleIcon className='w-20 h-20 text-gray-400' />
                        ) : (
                          <div className='flex py-2'>
                            <Image
                              className='rounded-lg'
                              src={user.image}
                              alt='user profile photo'
                              width={72}
                              height={72}
                              objectFit='cover'
                            />
                          </div>
                        )}
                        <p className='text-xl truncate'>{user.name}</p>
                        <p className='text-xl truncate'>{user.bio}</p>
                        <p className='text-xl truncate'>{user.phone}</p>
                        <p className='text-xl truncate'>{user.email}</p>
                        <p className='text-xl truncate'>********</p>
                      </div>
                    </div>
                  </>
                )}
              </main>
              <footer className='flex justify-between w-full lg:max-w-3xl md:mt-3'>
                <p className='text-[#BDBDBD] text-sm'>
                  created by{' '}
                  <a href='https://devchallenges.io/portfolio/oudajosefu' className='text-[#8f8f8f] underline underline-offset-2'>
                    oudajosefu
                  </a>
                </p>
                <p className='text-[#BDBDBD] text-sm'>devChallenges.io</p>
              </footer>
            </>
          )}

        </div >
      ) : (
        <div className="container flex flex-col items-center justify-between min-h-screen p-4 mx-auto md:justify-center">
          <main className='max-w-sm md:max-w-lg md:p-14 md:ring-1 ring-[#BDBDBD] md:rounded-3xl flex flex-col w-full items-start'>
            <Link href='/'>
              <a className='flex'>
                <Image
                  src={systemTheme === 'dark' ? '/devchallenges-light.svg' : '/devchallenges.svg'}
                  alt='devchallenges.io logo'
                  width={132}
                  height={19}
                  objectFit='contain'
                />
              </a>
            </Link>
            <h1 className='text-lg font-semibold mt-7'>Login</h1>

            <form className='w-full mt-7 placeholder:text-[#828282]'
              onSubmit={(event) => {
                event.preventDefault();
                const target = event.target as HTMLFormElement;
                signIn('credentials', {
                  email: target.email.value,
                  password: target.password.value,
                });
              }}>
              <label className='border border-[#BDBDBD] rounded-lg flex items-center py-3 px-3 gap-3'>
                <EnvelopeIcon className='w-5 h-5 fill-[#828282]' />
                <input className='outline-none grow bg-inherit' type="email" name="registration" id="email" placeholder='Email' />
              </label>

              <label className='border border-[#BDBDBD] rounded-lg flex items-center py-3 px-3 gap-3 mt-4'>
                <LockClosedIcon className='w-5 h-5 fill-[#828282]' />
                <input className='outline-none grow bg-inherit' type={showPassword ? 'text' : 'password'} name="registration" id="password" placeholder='Password' />
                <button type='button' onClick={() => setShowPassword(!showPassword)}>
                  {showPassword ? (
                    <EyeSlashIcon className='w-5 h-5 fill-[#828282]' />
                  ) : (
                    <EyeIcon className='w-5 h-5 fill-[#828282]' />
                  )}
                </button>
              </label>
              <button className='bg-[#2f7bed] hover:bg-[#2b74d2] active:bg-[#1e5296] text-white w-full mt-6 rounded-lg py-2 font-semibold' type="submit">Login</button>
            </form>

            <p className='mt-8 self-center text-sm text-[#828282]'>or continue with these social profiles</p>

            <div className='flex items-center self-center gap-5 mt-6'>
              {['Google', 'Facebook', 'Twitter', 'Github'].map(provider => (
                <SocialButton
                  key={provider}
                  className='flex rounded-full hover:bg-gray-200 active:bg-gray-400' provider={provider}
                  handleClick={() => signIn(provider.toLowerCase(), { callbackUrl: '/' })}
                />
              ))}
              <SocialButton
                className='flex rounded-full hover:opacity-90 active:opacity-80 grayscale'
                provider='Discord'
                handleClick={() => signIn('discord', { callbackUrl: '/' })}
              />
            </div>

            <p className='mt-7 self-center text-sm text-[#828282]'>
              Don&apos;t have an account yet? <Link href='/auth/signup'><a className='text-[#2D9CDB]'>Register</a></Link>
            </p>
          </main>

          <footer className='flex justify-between w-full max-w-sm md:max-w-lg md:mt-3'>
            <p className='text-[#BDBDBD] text-sm'>
              created by{' '}
              <a href='https://devchallenges.io/portfolio/oudajosefu' className='text-[#8f8f8f] underline underline-offset-2'>
                oudajosefu
              </a>
            </p>
            <p className='text-[#BDBDBD] text-sm'>devChallenges.io</p>
          </footer>
        </div>
      )}
    </>
  );
};

export default Home;
